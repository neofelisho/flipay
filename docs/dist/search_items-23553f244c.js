searchNodes=[{"ref":"Flipay.html","title":"Flipay","type":"module","doc":"Flipay is a API service provides below functions. User registration and authentication by JWT. Best price finder according to realtime market data from exchanges. Reference here for basic usage."},{"ref":"Flipay.Accounts.html","title":"Flipay.Accounts","type":"module","doc":"The Accounts context."},{"ref":"Flipay.Accounts.html#change_user/1","title":"Flipay.Accounts.change_user/1","type":"function","doc":"Returns an %Ecto.Changeset{} for tracking user changes. Examples iex&gt; change_user(user) %Ecto.Changeset{source: %User{}}"},{"ref":"Flipay.Accounts.html#create_user/1","title":"Flipay.Accounts.create_user/1","type":"function","doc":"Creates a user. Examples iex&gt; create_user(%{field: value}) {:ok, %User{}} iex&gt; create_user(%{field: bad_value}) {:error, %Ecto.Changeset{}}"},{"ref":"Flipay.Accounts.html#delete_user/1","title":"Flipay.Accounts.delete_user/1","type":"function","doc":"Deletes a User. Examples iex&gt; delete_user(user) {:ok, %User{}} iex&gt; delete_user(user) {:error, %Ecto.Changeset{}}"},{"ref":"Flipay.Accounts.html#get_user!/1","title":"Flipay.Accounts.get_user!/1","type":"function","doc":"Gets a single user. Raises Ecto.NoResultsError if the User does not exist. Examples iex&gt; get_user!(123) %User{} iex&gt; get_user!(456) ** (Ecto.NoResultsError)"},{"ref":"Flipay.Accounts.html#list_users/0","title":"Flipay.Accounts.list_users/0","type":"function","doc":"Returns the list of users. Examples iex&gt; list_users() [%User{}, ...]"},{"ref":"Flipay.Accounts.html#token_sign_in/2","title":"Flipay.Accounts.token_sign_in/2","type":"function","doc":"Sing in by email and password. If success will get {:ok, user_resource}, otherwise will get {:error, :unauthorized}. Examples iex&gt; Flipay.Accounts.token_sign_in(&quot;hello@world.com&quot;, &quot;somePassword&quot;) {:ok, token_string, %{user resources from Guardian}}"},{"ref":"Flipay.Accounts.html#update_user/2","title":"Flipay.Accounts.update_user/2","type":"function","doc":"Updates a user. Examples iex&gt; update_user(user, %{field: new_value}) {:ok, %User{}} iex&gt; update_user(user, %{field: bad_value}) {:error, %Ecto.Changeset{}}"},{"ref":"Flipay.BestRateFinder.html","title":"Flipay.BestRateFinder","type":"module","doc":"Find the best rate according to input/output assets, input amount and exchange&#39;s order book."},{"ref":"Flipay.BestRateFinder.html#buy_best_rate/3","title":"Flipay.BestRateFinder.buy_best_rate/3","type":"function","doc":"Calculates the best buying rate according to quotes and input amount. Examples iex&gt; order_books = [%Flipay.Exchanges.Quote{price: 5000, size: 1}, %Flipay.Exchanges.Quote{price: 5100, size: 2}] iex&gt; {:ok, size} = Flipay.BestRateFinder.buy_best_rate(order_books, 10100, 0) iex&gt; size #Decimal&lt;2&gt; iex&gt; {:ok, size} = Flipay.BestRateFinder.buy_best_rate(order_books, 15200, 0) iex&gt; size #Decimal&lt;3&gt; iex&gt; {:ok, size} = Flipay.BestRateFinder.buy_best_rate(order_books, 15000, 0) iex&gt; size #Decimal&lt;2.960784313725490196078431373&gt; iex&gt; Flipay.BestRateFinder.buy_best_rate(order_books, 16000, 0) {:error, :not_enough_quotes}"},{"ref":"Flipay.BestRateFinder.html#find/1","title":"Flipay.BestRateFinder.find/1","type":"function","doc":"Finds the best rate for input request. Order book comes from specific exchange and the quotes are sorted by best to worst order. Input/output assets and input amount are specified by user. Examples: iex&gt; order_book = %Flipay.Exchanges.OrderBook{ ...&gt; exchange: Flipay.Exchanges.Coinbase, ...&gt; exchange_side: &quot;asks&quot;, ...&gt; input_asset: &quot;USD&quot;, ...&gt; output_asset: &quot;BTC&quot;, ...&gt; quotes: [ ...&gt; %Flipay.Exchanges.Quote{ ...&gt; price: 5000, ...&gt; size: 2 ...&gt; }, ...&gt; %Flipay.Exchanges.Quote{ ...&gt; price: 6000, ...&gt; size: 1 ...&gt; } ...&gt; ] ...&gt;} iex&gt; {:ok, rate} = Flipay.BestRateFinder.find(%{order_book: order_book, input_amount: 12000}) iex&gt; rate #Decimal&lt;2.333333333333333333333333333&gt;"},{"ref":"Flipay.BestRateFinder.html#sell_best_rate/3","title":"Flipay.BestRateFinder.sell_best_rate/3","type":"function","doc":"Calculates the best selling rate according to quotes and input size. Examples: iex&gt; quotes = [%Flipay.Exchanges.Quote{price: 5000, size: 1}, %Flipay.Exchanges.Quote{price: 4900, size: 2}] iex&gt; {:ok, amount} = Flipay.BestRateFinder.sell_best_rate(quotes, 1, 0) iex&gt; amount #Decimal&lt;5000&gt; iex&gt; {:ok, input_size} = Decimal.parse(&quot;1.5&quot;) iex&gt; {:ok, amount} = Flipay.BestRateFinder.sell_best_rate(quotes, input_size, 0) iex&gt; amount #Decimal&lt;7450.0&gt; iex&gt; {:ok, input_size} = Decimal.parse(&quot;3.1&quot;) iex&gt; Flipay.BestRateFinder.sell_best_rate(quotes, input_size, 0) {:error, :not_enough_quotes}"},{"ref":"Flipay.Exchanges.html","title":"Flipay.Exchanges","type":"module","doc":"Get order book from specific exchange, according to input/output assets."},{"ref":"Flipay.Exchanges.html#convert_to_decimal/1","title":"Flipay.Exchanges.convert_to_decimal/1","type":"function","doc":"Gets quotes from order books by specific exchange side. Examples iex&gt; input = %Flipay.Exchanges.OrderBook{quotes: %{ &quot;5000&quot; =&gt; &quot;2&quot; }} iex&gt; order_book = Flipay.Exchanges.convert_to_decimal(input) iex&gt; {:ok, quote} = Enum.fetch(order_book.quotes,0) iex&gt; quote.price #Decimal&lt;5000&gt; iex&gt; quote.size #Decimal&lt;2&gt;"},{"ref":"Flipay.Exchanges.html#get_asset_type/1","title":"Flipay.Exchanges.get_asset_type/1","type":"function","doc":"Gets the type of specific asset. Examples iex&gt; Flipay.Exchanges.get_asset_type(&quot;TWD&quot;) {:error, :unsupported_asset} iex&gt; Flipay.Exchanges.get_asset_type(&quot;USD&quot;) {:ok, :fiat_money} iex(3)&gt; Flipay.Exchanges.get_asset_type(&quot;BTC&quot;) {:ok, :digital_currency}"},{"ref":"Flipay.Exchanges.html#get_exchange/1","title":"Flipay.Exchanges.get_exchange/1","type":"function","doc":"Get exchange module by exchange name. Examples: iex&gt; Flipay.Exchanges.get_exchange(&quot;coinbase_pro&quot;) {:ok, %Flipay.Exchanges.OrderBook{ exchange: Flipay.Exchanges.Coinbase, exchange_side: nil, input_asset: nil, output_asset: nil, quotes: nil }} iex&gt; Flipay.Exchanges.get_exchange(&quot;hitbtc&quot;) {:error, :not_found}"},{"ref":"Flipay.Exchanges.html#get_order_book/1","title":"Flipay.Exchanges.get_order_book/1","type":"function","doc":"Get order books from exchange. Examples: iex&gt; order_book = %Flipay.Exchanges.OrderBook{exchange: Flipay.Exchanges.Coinbase, asset: &quot;BTC-USD&quot;, exchange_side: &quot;asks&quot;} iex&gt; {:ok, order_book} = Flipay.Exchanges.get_order_book(order_book) iex&gt; map_size(order_book.quotes) &gt; 0 true"},{"ref":"Flipay.Exchanges.html#get_quotes/1","title":"Flipay.Exchanges.get_quotes/1","type":"function","doc":"Get quotes by specific exchange name and input/output assets. Examples: iex&gt; input = %{exchange_name: &quot;coinbase&quot;, input_asset: &quot;USD&quot;, output_asset: &quot;BTC&quot;} iex&gt; {:ok, order_book} = Flipay.Exchanges.get_quotes(input) iex&gt; Enum.count(order_book.quotes) &gt; 0 true iex&gt; input = %{input | exchange_name: &quot;hitbtc&quot;} iex&gt; Flipay.Exchanges.get_quotes(input) {:error, :not_found} iex&gt; input = %{input | exchange_name: &quot;coinbase&quot;, output_asset: &quot;TWD&quot;} iex&gt; Flipay.Exchanges.get_quotes(input) {:error, :unsupported_asset}"},{"ref":"Flipay.Exchanges.html#set_assets/3","title":"Flipay.Exchanges.set_assets/3","type":"function","doc":"Sets input/output assets and determine the exchange side. Examples: iex&gt; order_book = %Flipay.Exchanges.OrderBook{} iex&gt; Flipay.Exchanges.set_assets(order_book, &quot;USD&quot;, &quot;BTC&quot;) {:ok, %Flipay.Exchanges.OrderBook{ exchange: nil, asset: &quot;BTC-USD&quot;, exchange_side: &quot;asks&quot;, quotes: nil }} iex&gt; Flipay.Exchanges.set_assets(order_book, &quot;ETH&quot;, &quot;USD&quot;) {:ok, %Flipay.Exchanges.OrderBook{ exchange: nil, asset: &quot;ETH-USD&quot;, exchange_side: &quot;bids&quot;, quotes: nil }} iex&gt; Flipay.Exchanges.set_assets(order_book, &quot;ETH&quot;, &quot;TWD&quot;) {:error, :unsupported_asset} iex&gt; Flipay.Exchanges.set_assets(order_book, &quot;TWD&quot;, &quot;USD&quot;) {:error, :unsupported_asset}"},{"ref":"Flipay.Exchanges.html#sort_quotes/1","title":"Flipay.Exchanges.sort_quotes/1","type":"function","doc":"Sorts the quotes by exchange side to make sure the quotes are sorted from best to worst. Examples: iex&gt; order_book = %Flipay.Exchanges.OrderBook{quotes: [%{price: 5000}, %{price: 4900}, %{price: 5100}], exchange_side: &quot;asks&quot;} iex&gt; Flipay.Exchanges.sort_quotes(order_book) %Flipay.Exchanges.OrderBook{ exchange: nil, exchange_side: &quot;asks&quot;, input_asset: nil, output_asset: nil, quotes: [%{price: 4900}, %{price: 5000}, %{price: 5100}] } iex&gt; order_book = %Flipay.Exchanges.OrderBook{order_book | exchange_side: &quot;bids&quot;} iex&gt; Flipay.Exchanges.sort_quotes(order_book) %Flipay.Exchanges.OrderBook{ exchange: nil, exchange_side: &quot;bids&quot;, input_asset: nil, output_asset: nil, quotes: [%{price: 5100}, %{price: 5000}, %{price: 4900}] }"},{"ref":"Flipay.Exchanges.Coinbase.html","title":"Flipay.Exchanges.Coinbase","type":"module","doc":"Implementation of exchange: Coinbase. Currently here is a mock version."},{"ref":"Flipay.Exchanges.Coinbase.html#get_order_book/2","title":"Flipay.Exchanges.Coinbase.get_order_book/2","type":"function","doc":"Get order book according to input/output assets. Examples: iex&gt; get_order_book(&quot;BTC-USD&quot;, &quot;asks&quot;) {:ok, %{&quot;5000&quot; =&gt; &quot;2&quot;, &quot;6000&quot; =&gt; &quot;1&quot;}"},{"ref":"Flipay.Exchanges.Coinbase.Client.html","title":"Flipay.Exchanges.Coinbase.Client","type":"module","doc":"WebSocket client for Coinbase. Reference the documentation of Coinbase Pro."},{"ref":"Flipay.Exchanges.Coinbase.Client.html#start_link/1","title":"Flipay.Exchanges.Coinbase.Client.start_link/1","type":"function","doc":"Start WebSocket client."},{"ref":"Flipay.Exchanges.Coinbase.OrderBook.html","title":"Flipay.Exchanges.Coinbase.OrderBook","type":"module","doc":""},{"ref":"Flipay.Exchanges.Coinbase.OrderBook.html#child_spec/1","title":"Flipay.Exchanges.Coinbase.OrderBook.child_spec/1","type":"function","doc":"Keep order book from Coinbase."},{"ref":"Flipay.Exchanges.Coinbase.OrderBook.html#dispose/0","title":"Flipay.Exchanges.Coinbase.OrderBook.dispose/0","type":"function","doc":"Stop this agent."},{"ref":"Flipay.Exchanges.Coinbase.OrderBook.html#get/2","title":"Flipay.Exchanges.Coinbase.OrderBook.get/2","type":"function","doc":"Get market data by specific asset and exchange side."},{"ref":"Flipay.Exchanges.Coinbase.OrderBook.html#start_link/1","title":"Flipay.Exchanges.Coinbase.OrderBook.start_link/1","type":"function","doc":"Start a agent to keep state, here is the order book from Coinbase."},{"ref":"Flipay.Exchanges.Coinbase.OrderBook.html#update_level/1","title":"Flipay.Exchanges.Coinbase.OrderBook.update_level/1","type":"function","doc":"Update changes by given asset, side and price."},{"ref":"Flipay.Exchanges.Coinbase.OrderBook.html#update_snapshot/1","title":"Flipay.Exchanges.Coinbase.OrderBook.update_snapshot/1","type":"function","doc":"Update market data with new snapshot (discard old data)."},{"ref":"Flipay.Exchanges.Exchange.html","title":"Flipay.Exchanges.Exchange","type":"behaviour","doc":"Defint the behaviors that each implementation of exchange should have."},{"ref":"Flipay.Exchanges.Exchange.html#c:get_order_book/2","title":"Flipay.Exchanges.Exchange.get_order_book/2","type":"callback","doc":"Get order book by specific asset and exchange_side. If success returns {:ok, order_book}, otherwise returns {:error, reason}."},{"ref":"Flipay.Guardian.Plug.html","title":"Flipay.Guardian.Plug","type":"module","doc":""},{"ref":"Flipay.Guardian.Plug.html#authenticated?/2","title":"Flipay.Guardian.Plug.authenticated?/2","type":"function","doc":""},{"ref":"Flipay.Guardian.Plug.html#clear_remember_me/2","title":"Flipay.Guardian.Plug.clear_remember_me/2","type":"function","doc":""},{"ref":"Flipay.Guardian.Plug.html#current_claims/2","title":"Flipay.Guardian.Plug.current_claims/2","type":"function","doc":""},{"ref":"Flipay.Guardian.Plug.html#current_resource/2","title":"Flipay.Guardian.Plug.current_resource/2","type":"function","doc":""},{"ref":"Flipay.Guardian.Plug.html#current_token/2","title":"Flipay.Guardian.Plug.current_token/2","type":"function","doc":""},{"ref":"Flipay.Guardian.Plug.html#implementation/0","title":"Flipay.Guardian.Plug.implementation/0","type":"function","doc":""},{"ref":"Flipay.Guardian.Plug.html#put_current_claims/3","title":"Flipay.Guardian.Plug.put_current_claims/3","type":"function","doc":""},{"ref":"Flipay.Guardian.Plug.html#put_current_resource/3","title":"Flipay.Guardian.Plug.put_current_resource/3","type":"function","doc":""},{"ref":"Flipay.Guardian.Plug.html#put_current_token/3","title":"Flipay.Guardian.Plug.put_current_token/3","type":"function","doc":""},{"ref":"Flipay.Guardian.Plug.html#put_session_token/3","title":"Flipay.Guardian.Plug.put_session_token/3","type":"function","doc":""},{"ref":"Flipay.Guardian.Plug.html#remember_me/4","title":"Flipay.Guardian.Plug.remember_me/4","type":"function","doc":""},{"ref":"Flipay.Guardian.Plug.html#remember_me_from_token/4","title":"Flipay.Guardian.Plug.remember_me_from_token/4","type":"function","doc":""},{"ref":"Flipay.Guardian.Plug.html#sign_in/4","title":"Flipay.Guardian.Plug.sign_in/4","type":"function","doc":""},{"ref":"Flipay.Guardian.Plug.html#sign_out/2","title":"Flipay.Guardian.Plug.sign_out/2","type":"function","doc":""},{"ref":"FlipayWeb.html","title":"FlipayWeb","type":"module","doc":"The entrypoint for defining your web interface, such as controllers, views, channels and so on. This can be used in your application as: use FlipayWeb, :controller use FlipayWeb, :view The definitions below will be executed for every view, controller, etc, so keep them short and clean, focused on imports, uses and aliases. Do NOT define functions inside the quoted expressions below. Instead, define any helper function in modules and import those modules here."},{"ref":"FlipayWeb.html#__using__/1","title":"FlipayWeb.__using__/1","type":"macro","doc":"When used, dispatch to the appropriate controller/view/etc."},{"ref":"FlipayWeb.html#channel/0","title":"FlipayWeb.channel/0","type":"function","doc":""},{"ref":"FlipayWeb.html#controller/0","title":"FlipayWeb.controller/0","type":"function","doc":""},{"ref":"FlipayWeb.html#router/0","title":"FlipayWeb.router/0","type":"function","doc":""},{"ref":"FlipayWeb.html#view/0","title":"FlipayWeb.view/0","type":"function","doc":""},{"ref":"FlipayWeb.Authentications.AuthErrorHandler.html","title":"FlipayWeb.Authentications.AuthErrorHandler","type":"module","doc":"Authentication error handler."},{"ref":"FlipayWeb.Authentications.AuthErrorHandler.html#auth_error/3","title":"FlipayWeb.Authentications.AuthErrorHandler.auth_error/3","type":"function","doc":"Process authentication error."},{"ref":"FlipayWeb.Authentications.AuthPipeline.html","title":"FlipayWeb.Authentications.AuthPipeline","type":"module","doc":"Authentication pipeline."},{"ref":"FlipayWeb.Authentications.AuthPipeline.html#call/2","title":"FlipayWeb.Authentications.AuthPipeline.call/2","type":"function","doc":"Callback implementation for Plug.call/2."},{"ref":"FlipayWeb.Authentications.AuthPipeline.html#init/1","title":"FlipayWeb.Authentications.AuthPipeline.init/1","type":"function","doc":"Callback implementation for Plug.init/1."},{"ref":"FlipayWeb.ErrorHelpers.html","title":"FlipayWeb.ErrorHelpers","type":"module","doc":"Conveniences for translating and building error messages."},{"ref":"FlipayWeb.ErrorHelpers.html#translate_error/1","title":"FlipayWeb.ErrorHelpers.translate_error/1","type":"function","doc":"Translates an error message using gettext."},{"ref":"FlipayWeb.ErrorView.html","title":"FlipayWeb.ErrorView","type":"module","doc":"View for fallback controller."},{"ref":"FlipayWeb.ErrorView.html#__phoenix_recompile__?/0","title":"FlipayWeb.ErrorView.__phoenix_recompile__?/0","type":"function","doc":"Returns true whenever the list of templates changes in the filesystem."},{"ref":"FlipayWeb.ErrorView.html#__resource__/0","title":"FlipayWeb.ErrorView.__resource__/0","type":"function","doc":"The resource name, as an atom, for this view"},{"ref":"FlipayWeb.ErrorView.html#__templates__/0","title":"FlipayWeb.ErrorView.__templates__/0","type":"function","doc":"Returns the template root alongside all templates."},{"ref":"FlipayWeb.ErrorView.html#render/2","title":"FlipayWeb.ErrorView.render/2","type":"function","doc":"Renders the given template locally."},{"ref":"FlipayWeb.ErrorView.html#template_not_found/2","title":"FlipayWeb.ErrorView.template_not_found/2","type":"function","doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template."},{"ref":"FlipayWeb.FallbackController.html","title":"FlipayWeb.FallbackController","type":"module","doc":"Translates controller action results into valid Plug.Conn responses. See Phoenix.Controller.action_fallback/1 for more details."},{"ref":"FlipayWeb.FallbackController.html#call/2","title":"FlipayWeb.FallbackController.call/2","type":"function","doc":"Error for unexpected situation."},{"ref":"FlipayWeb.Gettext.html","title":"FlipayWeb.Gettext","type":"module","doc":"A module providing Internationalization with a gettext-based API. By using Gettext, your module gains a set of macros for translations, for example: import FlipayWeb.Gettext # Simple translation gettext(&quot;Here is the string to translate&quot;) # Plural translation ngettext(&quot;Here is the string to translate&quot;, &quot;Here are the strings to translate&quot;, 3) # Domain-based translation dgettext(&quot;errors&quot;, &quot;Here is the error message to translate&quot;) See the Gettext Docs for detailed usage."},{"ref":"FlipayWeb.Gettext.html#dgettext/3","title":"FlipayWeb.Gettext.dgettext/3","type":"macro","doc":""},{"ref":"FlipayWeb.Gettext.html#dgettext_noop/2","title":"FlipayWeb.Gettext.dgettext_noop/2","type":"macro","doc":""},{"ref":"FlipayWeb.Gettext.html#dngettext/5","title":"FlipayWeb.Gettext.dngettext/5","type":"macro","doc":""},{"ref":"FlipayWeb.Gettext.html#dngettext_noop/3","title":"FlipayWeb.Gettext.dngettext_noop/3","type":"macro","doc":""},{"ref":"FlipayWeb.Gettext.html#gettext/2","title":"FlipayWeb.Gettext.gettext/2","type":"macro","doc":""},{"ref":"FlipayWeb.Gettext.html#gettext_comment/1","title":"FlipayWeb.Gettext.gettext_comment/1","type":"macro","doc":""},{"ref":"FlipayWeb.Gettext.html#gettext_noop/1","title":"FlipayWeb.Gettext.gettext_noop/1","type":"macro","doc":""},{"ref":"FlipayWeb.Gettext.html#handle_missing_bindings/2","title":"FlipayWeb.Gettext.handle_missing_bindings/2","type":"function","doc":"Default handling for missing bindings. This function is called when there are missing bindings in a translation. It takes a Gettext.MissingBindingsError struct and the translation with the wrong bindings left as is with the %{} syntax. For example, if something like this is called: MyApp.Gettext.gettext(&quot;Hello %{name}, welcome to %{country}&quot;, name: &quot;Jane&quot;, country: &quot;Italy&quot;) and our it/LC_MESSAGES/default.po looks like this: msgid &quot;Hello %{name}, welcome to %{country}&quot; msgstr &quot;Ciao %{name}, benvenuto in %{cowntry}&quot; # (typo) then Gettext will call: MyApp.Gettext.handle_missing_bindings(exception, &quot;Ciao Jane, benvenuto in %{cowntry}&quot;) where exception is a struct that looks like this: %Gettext.MissingBindingsError{ backend: MyApp.Gettext, domain: &quot;default&quot;, locale: &quot;it&quot;, msgid: &quot;Hello %{name}, welcome to %{country}&quot;, bindings: [:country], } The return value of the c:handle_missing_bindings/2 callback is used as the translated string that the translation macros and functions return. The default implementation for this function uses Logger.error/1 to warn about the missing binding and returns the translated message with the incomplete bindings. This function can be overridden. For example, to raise when there are missing bindings: def handle_missing_bindings(exception, _incomplete) do raise exception end Callback implementation for Gettext.Backend.handle_missing_bindings/2."},{"ref":"FlipayWeb.Gettext.html#handle_missing_plural_translation/6","title":"FlipayWeb.Gettext.handle_missing_plural_translation/6","type":"function","doc":"Default handling for plural translations with a missing translation. Same as c:handle_missing_translation/4, but for plural translations. In this case, n is the number used for pluralizing the translated string. Callback implementation for Gettext.Backend.handle_missing_plural_translation/6."},{"ref":"FlipayWeb.Gettext.html#handle_missing_translation/4","title":"FlipayWeb.Gettext.handle_missing_translation/4","type":"function","doc":"Default handling for translations with a missing translation. When a Gettext function/macro is called with a string to translate into a locale but that locale doesn&#39;t provide a translation for that string, this callback is invoked. msgid is the string that Gettext tried to translate. This function should return {:ok, translated} if a translation can be fetched or constructed for the given string, or {:default, msgid} otherwise. Callback implementation for Gettext.Backend.handle_missing_translation/4."},{"ref":"FlipayWeb.Gettext.html#lgettext/4","title":"FlipayWeb.Gettext.lgettext/4","type":"function","doc":""},{"ref":"FlipayWeb.Gettext.html#lngettext/6","title":"FlipayWeb.Gettext.lngettext/6","type":"function","doc":""},{"ref":"FlipayWeb.Gettext.html#ngettext/4","title":"FlipayWeb.Gettext.ngettext/4","type":"macro","doc":""},{"ref":"FlipayWeb.Gettext.html#ngettext_noop/2","title":"FlipayWeb.Gettext.ngettext_noop/2","type":"macro","doc":""},{"ref":"FlipayWeb.QuoteController.html","title":"FlipayWeb.QuoteController","type":"module","doc":"Handle request about asset quotes."},{"ref":"FlipayWeb.QuoteController.html#show/2","title":"FlipayWeb.QuoteController.show/2","type":"function","doc":"Calculate best rate according to input/output assets, input amount and specific exchange."},{"ref":"FlipayWeb.QuoteView.html","title":"FlipayWeb.QuoteView","type":"module","doc":"View for quote controller."},{"ref":"FlipayWeb.QuoteView.html#__phoenix_recompile__?/0","title":"FlipayWeb.QuoteView.__phoenix_recompile__?/0","type":"function","doc":"Returns true whenever the list of templates changes in the filesystem."},{"ref":"FlipayWeb.QuoteView.html#__resource__/0","title":"FlipayWeb.QuoteView.__resource__/0","type":"function","doc":"The resource name, as an atom, for this view"},{"ref":"FlipayWeb.QuoteView.html#__templates__/0","title":"FlipayWeb.QuoteView.__templates__/0","type":"function","doc":"Returns the template root alongside all templates."},{"ref":"FlipayWeb.QuoteView.html#render/2","title":"FlipayWeb.QuoteView.render/2","type":"function","doc":"Render success message."},{"ref":"FlipayWeb.QuoteView.html#template_not_found/2","title":"FlipayWeb.QuoteView.template_not_found/2","type":"function","doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template."},{"ref":"FlipayWeb.Router.html","title":"FlipayWeb.Router","type":"module","doc":"Routes of Flipay API."},{"ref":"FlipayWeb.Router.html#api/2","title":"FlipayWeb.Router.api/2","type":"function","doc":""},{"ref":"FlipayWeb.Router.html#call/2","title":"FlipayWeb.Router.call/2","type":"function","doc":"Callback invoked by Plug on every request."},{"ref":"FlipayWeb.Router.html#init/1","title":"FlipayWeb.Router.init/1","type":"function","doc":"Callback required by Plug that initializes the router for serving web requests."},{"ref":"FlipayWeb.Router.html#jwt_authenticated/2","title":"FlipayWeb.Router.jwt_authenticated/2","type":"function","doc":""},{"ref":"FlipayWeb.Router.Helpers.html","title":"FlipayWeb.Router.Helpers","type":"module","doc":"Module with named helpers generated from FlipayWeb.Router."},{"ref":"FlipayWeb.Router.Helpers.html#path/2","title":"FlipayWeb.Router.Helpers.path/2","type":"function","doc":"Generates the path information including any necessary prefix."},{"ref":"FlipayWeb.Router.Helpers.html#quote_path/3","title":"FlipayWeb.Router.Helpers.quote_path/3","type":"function","doc":""},{"ref":"FlipayWeb.Router.Helpers.html#quote_path/4","title":"FlipayWeb.Router.Helpers.quote_path/4","type":"function","doc":""},{"ref":"FlipayWeb.Router.Helpers.html#quote_url/3","title":"FlipayWeb.Router.Helpers.quote_url/3","type":"function","doc":""},{"ref":"FlipayWeb.Router.Helpers.html#quote_url/4","title":"FlipayWeb.Router.Helpers.quote_url/4","type":"function","doc":""},{"ref":"FlipayWeb.Router.Helpers.html#static_path/2","title":"FlipayWeb.Router.Helpers.static_path/2","type":"function","doc":"Generates path to a static asset given its file path."},{"ref":"FlipayWeb.Router.Helpers.html#static_url/2","title":"FlipayWeb.Router.Helpers.static_url/2","type":"function","doc":"Generates url to a static asset given its file path."},{"ref":"FlipayWeb.Router.Helpers.html#url/1","title":"FlipayWeb.Router.Helpers.url/1","type":"function","doc":"Generates the connection/endpoint base URL without any path information."},{"ref":"FlipayWeb.Router.Helpers.html#user_path/2","title":"FlipayWeb.Router.Helpers.user_path/2","type":"function","doc":""},{"ref":"FlipayWeb.Router.Helpers.html#user_path/3","title":"FlipayWeb.Router.Helpers.user_path/3","type":"function","doc":""},{"ref":"FlipayWeb.Router.Helpers.html#user_url/2","title":"FlipayWeb.Router.Helpers.user_url/2","type":"function","doc":""},{"ref":"FlipayWeb.Router.Helpers.html#user_url/3","title":"FlipayWeb.Router.Helpers.user_url/3","type":"function","doc":""},{"ref":"FlipayWeb.UserController.html","title":"FlipayWeb.UserController","type":"module","doc":"Handle request about user account and authentication."},{"ref":"FlipayWeb.UserController.html#create/2","title":"FlipayWeb.UserController.create/2","type":"function","doc":"Create user account."},{"ref":"FlipayWeb.UserController.html#show/2","title":"FlipayWeb.UserController.show/2","type":"function","doc":"Get user information."},{"ref":"FlipayWeb.UserController.html#sign_in/2","title":"FlipayWeb.UserController.sign_in/2","type":"function","doc":"Sign in user."},{"ref":"FlipayWeb.UserView.html","title":"FlipayWeb.UserView","type":"module","doc":"View for user controller."},{"ref":"FlipayWeb.UserView.html#__phoenix_recompile__?/0","title":"FlipayWeb.UserView.__phoenix_recompile__?/0","type":"function","doc":"Returns true whenever the list of templates changes in the filesystem."},{"ref":"FlipayWeb.UserView.html#__resource__/0","title":"FlipayWeb.UserView.__resource__/0","type":"function","doc":"The resource name, as an atom, for this view"},{"ref":"FlipayWeb.UserView.html#__templates__/0","title":"FlipayWeb.UserView.__templates__/0","type":"function","doc":"Returns the template root alongside all templates."},{"ref":"FlipayWeb.UserView.html#render/2","title":"FlipayWeb.UserView.render/2","type":"function","doc":"Render token message."},{"ref":"FlipayWeb.UserView.html#template_not_found/2","title":"FlipayWeb.UserView.template_not_found/2","type":"function","doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template."}]